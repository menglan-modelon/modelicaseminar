within ModelicaSeminar.Seminar06;
package ElevatorLib
    package Components
        model ElevatorModel1 "Mechanical part of elevator model"
            parameter .Modelica.Units.SI.Length L = 80 "Maximum length of rope";
            parameter .Modelica.Units.SI.Height h = 4 "Heigth of pooley center";
            parameter .Modelica.Units.SI.Diameter R = 0.005 "Diameter of rope";
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.Mass mc = 1600 "Weight mass";
            parameter .Modelica.Units.SI.Radius r = 0.5 "Radius of pooley";
            parameter Real eta = 0.001 "Materal damping coefficient of rope";
            parameter .Modelica.Units.SI.Stress E = 200e9 "Stress coefficient of rope";
            .Modelica.Units.SI.Length l(start = L + h) "Length of rope of cage";
            .Modelica.Units.SI.Length lc "Length of rope of weigth";
            .Modelica.Units.SI.Acceleration al "Acceleration of cage rope";
            .Modelica.Units.SI.Length x(start = 0) "Vertical vibration of cage";
            .Modelica.Units.SI.Velocity v "Velocity of vibration of cage";
            .Modelica.Units.SI.Acceleration a "Acceleration of vibration of cage";
            .Modelica.Units.SI.Length y(start = 0) "Vertical vibration of weight";
            .Modelica.Units.SI.Velocity vy "Velocity of vibration of weigth";
            .Modelica.Units.SI.Acceleration ay "Acceleration of vibration of weigth";
            .Modelica.Units.SI.TranslationalDampingConstant c "Damping constant of cage rope";
            .Modelica.Units.SI.TranslationalSpringConstant k "Spring constant of cage rope";
            .Modelica.Units.SI.TranslationalDampingConstant cc "Damping constant of weight rope";
            .Modelica.Units.SI.TranslationalSpringConstant kc "Spring constant of weight rope";
            .Modelica.Units.SI.Area A "Cross area of rope";
            .Modelica.Units.SI.AngularVelocity omg "Angular velocity of rotor";
            .Modelica.Units.SI.Frequency f "Resonance freqency of cage rope";
            .Modelica.Units.SI.Force force "Inertia force of cage";
            .Modelica.Units.SI.Force forcec "Inertia force of weigth";
            .Modelica.Units.SI.Torque tauf "Motor torque from rope forces";
            .Modelica.Blocks.Interfaces.RealInput vl annotation(Placement(visible = true,transformation(origin = {-102,2},extent = {{-20,-20},{20,20}},rotation = 0),iconTransformation(origin = {-90,-4.44089e-16},extent = {{-12,-12},{12,12}},rotation = 0)));
            .Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b annotation(Placement(visible = true,transformation(origin = {100,0},extent = {{-10,-10},{10,10}},rotation = 0),iconTransformation(origin = {100,0},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            der(l) = -vl;
            al = der(vl);
            force = m * al;
            forcec = mc * al;
            v = der(x);
            a = der(v);
            A = .Modelica.Constants.pi / 2 * R ^ 2;
            k = E * A / l;
            c = eta * sqrt(m * k);
            m * a + c * v + k * x + force = 0;
            f = 1 / 2 / .Modelica.Constants.pi * sqrt(k / m);
            vy = der(y);
            ay = der(vy);
            l + lc = L + 2 * h;
            kc = E * A / lc;
            cc = eta * sqrt(mc * kc);
            mc * ay + cc * vy + kc * y - forcec = 0;
            omg = vl / r;
            tauf = (m * .Modelica.Constants.g_n + k * x + c * v) * r - (mc * .Modelica.Constants.g_n + kc * y + cc * vy) * r;
            flange_b.tau = tauf;
            annotation(experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.01),Icon(graphics = {Text(origin={-92,19},extent={{-18,7},{18,-7}},textString="vl"),Bitmap(origin={3,3},extent={{-83,-81},{83,81}},imageSource="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"),Rectangle(extent={{-100,100},{100,-100}}),Text(origin={1008,-146},extent={{-952,226},{-1074,250}},textString="ElevatorModel1"),Text(origin={-92,19},extent={{-18,7},{18,-7}},textString="vl"),Text(origin={96,17},extent={{-18,7},{18,-7}},textString="frame_b")}));
        end ElevatorModel1;
        model ElevatorModel2 "Elevator model with electric circuit"
            parameter .Modelica.Units.SI.Length L = 80 "Maximum length of rope";
            parameter .Modelica.Units.SI.Height h = 4 "Heigth of pooley center";
            parameter .Modelica.Units.SI.Diameter R = 0.005 "Diameter of rope";
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.Mass mc = 1600 "Weight mass";
            parameter .Modelica.Units.SI.Radius r = 0.5 "Radius of pooley";
            parameter .Modelica.Units.SI.Inertia Jm = 0.01 "Motor inertial";
            parameter Real eta = 0.001 "Materal damping coefficient of rope";
            parameter .Modelica.Units.SI.Stress E = 200e9 "Stress coefficient of rope";
            parameter .Modelica.Units.SI.Resistance Res = 2 "Electric resistance";
            parameter Real Ke = 50 "Motor inverce voltage coefficient";
            parameter Real Kt = 50 "Motor tourque coefficient";
            .Modelica.Units.SI.Length l(start = L + h) "Length of rope of cage";
            .Modelica.Units.SI.Length lc "Length of rope of weigth";
            .Modelica.Units.SI.Acceleration al "Acceleration of cage rope";
            .Modelica.Units.SI.Length x(start = 0) "Vertical vibration of cage";
            .Modelica.Units.SI.Velocity v "Velocity of vibration of cage";
            .Modelica.Units.SI.Acceleration a "Acceleration of vibration of cage";
            .Modelica.Units.SI.Length y(start = 0) "Vertical vibration of weight";
            .Modelica.Units.SI.Velocity vy "Velocity of vibration of weigth";
            .Modelica.Units.SI.Acceleration ay "Acceleration of vibration of weigth";
            .Modelica.Units.SI.TranslationalDampingConstant c "Damping constant of cage rope";
            .Modelica.Units.SI.TranslationalSpringConstant k "Spring constant of cage rope";
            .Modelica.Units.SI.TranslationalDampingConstant cc "Damping constant of weight rope";
            .Modelica.Units.SI.TranslationalSpringConstant kc "Spring constant of weight rope";
            .Modelica.Units.SI.Area A "Cross area of rope";
            .Modelica.Units.SI.AngularVelocity omg "Angular velocity of rotor";
            .Modelica.Units.SI.Frequency f "Resonance freqency of cage rope";
            .Modelica.Units.SI.Force force "Inertia force of cage";
            .Modelica.Units.SI.Force forcec "Inertia force of weigth";
            .Modelica.Units.SI.Torque taum "Motor torque";
            .Modelica.Units.SI.Torque tauf "Motor torque from rope forces";
            .Modelica.Units.SI.Current i "Motor current";
            .Modelica.Units.SI.Voltage vm "Motor voltage";
            .Modelica.Units.SI.Voltage vb "Battery voltage";
            .Modelica.Units.SI.Angle phi "Motor angle";
            .Modelica.Blocks.Interfaces.RealInput vl annotation(Placement(visible = true,transformation(origin = {-98,0},extent = {{-10,-10},{10,10}},rotation = 0),iconTransformation(origin = {-98,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Interfaces.RealOutput lout annotation(Placement(visible = true,transformation(origin = {106,-68},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Interfaces.RealOutput vbout annotation(Placement(visible = true,transformation(origin = {104,0},extent = {{-10,-10},{10,10}},rotation = 0),iconTransformation(extent = {{94,-8},{114,12}},rotation = 0)));
        equation
            der(l) = -vl;
            al = der(vl);
            force = m * al;
            forcec = mc * al;
            v = der(x);
            a = der(v);
            A = .Modelica.Constants.pi / 2 * R ^ 2;
            k = E * A / l;
            c = eta * sqrt(m * k);
            m * a + c * v + k * x + force = 0;
            f = 1 / 2 / .Modelica.Constants.pi * sqrt(k / m);
            vy = der(y);
            ay = der(vy);
            l + lc = L + 2 * h;
            kc = E * A / lc;
            cc = eta * sqrt(mc * kc);
            mc * ay + cc * vy + kc * y - forcec = 0;
            omg = vl / r;
            tauf = r * (m - mc) * .Modelica.Constants.g_n;
            taum = Jm * der(omg) + tauf;
            taum = Kt * i;
            vm = Ke * omg;
            vb - Res * i = vm;
            der(phi) = omg;
            lout = l;
            vbout = -vb;
            annotation(experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.01),Icon(graphics = {Text(origin={-92,19},extent={{-18,7},{18,-7}},textString="vl"),Bitmap(origin={3,3},extent={{-83,-81},{83,81}},imageSource=""),Rectangle(extent={{-100,100},{100,-100}}),Text(origin={1008,-146},extent={{-952,226},{-1074,250}},textString="ElevatorModel2"),Text(origin={94,-51},extent={{-18,7},{18,-7}},textString="lout"),Text(origin={98,21},extent={{-18,7},{18,-7}},textString="vbout")},coordinateSystem(initialScale = 1)));
        end ElevatorModel2;
        model ElevatorModel1Plant "Mechanical part of elevator model plant"
            parameter .Modelica.Units.SI.Length L = 80 "Maximum length of rope";
            parameter .Modelica.Units.SI.Height h = 4 "Heigth of pooley center";
            parameter .Modelica.Units.SI.Diameter R = 0.005 "Diameter of rope";
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.Mass mc = 1600 "Weight mass";
            parameter .Modelica.Units.SI.Radius r = 0.5 "Radius of pooley";
            parameter Real eta = 0.001 "Materal damping coefficient of rope";
            parameter .Modelica.Units.SI.Stress E = 200e9 "Stress coefficient of rope";
            .Modelica.Units.SI.Length l(start = L + h) "Length of rope of cage";
            .Modelica.Units.SI.Length lc "Length of rope of weigth";
            .Modelica.Units.SI.Velocity vl "Velocity of cage rope";
            .Modelica.Units.SI.Acceleration al "Acceleration of cage rope";
            .Modelica.Units.SI.Length x(start = 0) "Vertical vibration of cage";
            .Modelica.Units.SI.Velocity v "Velocity of vibration of cage";
            .Modelica.Units.SI.Acceleration a "Acceleration of vibration of cage";
            .Modelica.Units.SI.Length y(start = 0) "Vertical vibration of weight";
            .Modelica.Units.SI.Velocity vy "Velocity of vibration of weigth";
            .Modelica.Units.SI.Acceleration ay "Acceleration of vibration of weigth";
            .Modelica.Units.SI.TranslationalDampingConstant c "Damping constant of cage rope";
            .Modelica.Units.SI.TranslationalSpringConstant k "Spring constant of cage rope";
            .Modelica.Units.SI.TranslationalDampingConstant cc "Damping constant of weight rope";
            .Modelica.Units.SI.TranslationalSpringConstant kc "Spring constant of weight rope";
            .Modelica.Units.SI.Area A "Cross area of rope";
            .Modelica.Units.SI.AngularVelocity omg "Angular velocity of rotor";
            .Modelica.Units.SI.Frequency f "Resonance freqency of cage rope";
            .Modelica.Units.SI.Force force "Inertia force of cage";
            .Modelica.Units.SI.Force forcec "Inertia force of weigth";
            .Modelica.Units.SI.Torque tauf "Motor torque from rope forces";
            .Modelica.Blocks.Interfaces.RealOutput lout annotation(Placement(visible = true,transformation(origin = {104,0},extent = {{-10,-10},{10,10}},rotation = 0),iconTransformation(origin = {96,-4.44089e-16},extent = {{-12,-12},{12,12}},rotation = 0)));
            .Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a annotation(Placement(visible = true,transformation(origin = {-100,0},extent = {{-10,-10},{10,10}},rotation = 0),iconTransformation(origin = {-100,2},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            der(l) = -vl;
            al = der(vl);
            force = m * al;
            forcec = mc * al;
            v = der(x);
            a = der(v);
            A = .Modelica.Constants.pi / 2 * R ^ 2;
            k = E * A / l;
            c = eta * sqrt(m * k);
            m * a + c * v + k * x + force = 0;
            f = 1 / 2 / .Modelica.Constants.pi * sqrt(k / m);
            vy = der(y);
            ay = der(vy);
            l + lc = L + 2 * h;
            kc = E * A / lc;
            cc = eta * sqrt(mc * kc);
            mc * ay + cc * vy + kc * y - forcec = 0;
            omg = vl / r;
            tauf = (m * .Modelica.Constants.g_n + k * x + c * v) * r - (mc * .Modelica.Constants.g_n + kc * y + cc * vy) * r;
            flange_a.tau = r * (m - mc) * .Modelica.Constants.g_n;
            der(flange_a.phi) = omg;
            lout = l;
            annotation(experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.01),Icon(graphics = {Text(origin={-103,25},extent={{-21,13},{21,-13}},textString="frange_a"),Bitmap(origin={3,3},extent={{-83,-81},{83,81}},imageSource=""),Rectangle(extent={{-100,100},{100,-100}}),Text(origin={1008,-146},extent={{-952,226},{-1074,250}},textString="ElevatorModel1Plant"),Text(origin={88,23},extent={{-18,7},{18,-7}},textString="lout")}));
        end ElevatorModel1Plant;
        model ElevatorLateralPlant "Mechanical part of elevator model plant"
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.Inertia J = m * lu * ld "Inertia of cabin";
            parameter .Modelica.Units.SI.Length lu = 2 "Distance between upper roller and CG";
            parameter .Modelica.Units.SI.Length ld = 1 "Distance between lower roller and CG";
            parameter .Modelica.Units.SI.Length la = -1 "Distance between control force point and CG";
            parameter .Modelica.Units.SI.TranslationalSpringConstant ku = 4e5 "Spring constant of upper roller";
            parameter .Modelica.Units.SI.TranslationalSpringConstant kl = 4e5 "Spring constant of lower roller";
            parameter .Modelica.Units.SI.TranslationalDampingConstant cu = 3e3 "Damping constant of upper roller";
            parameter .Modelica.Units.SI.TranslationalDampingConstant cl = 3e3 "Damping constant of lower roller";
            .Modelica.Units.SI.Length x(start = 0) "Horizontal vibration of cabin";
            .Modelica.Units.SI.Velocity v "Velocity of vibration of cabin";
            .Modelica.Units.SI.Acceleration a "Acceleration of vibration of cabin";
            .Modelica.Units.SI.Velocity v0u "Velocity of upper roller";
            .Modelica.Units.SI.Velocity v0l "Velocity of upper roller";
            .Modelica.Units.SI.Angle phi(start = 0) "Angle of cabin";
            .Modelica.Units.SI.AngularVelocity omg "Angular velocity of cabin";
            .Modelica.Units.SI.AngularAcceleration aw "Angular acceleration of cabin";
            .Modelica.Units.SI.Force force "Inertia force of cabin";
            .Modelica.Blocks.Interfaces.RealOutput ag annotation(Placement(visible = true,transformation(origin = {104,0},extent = {{-10,-10},{10,10}},rotation = 0),iconTransformation(origin = {90,-8.88178e-16},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Interfaces.RealInput x0u annotation(Placement(visible = true,transformation(origin = {-100,80},extent = {{-20,-20},{20,20}},rotation = 0),iconTransformation(origin = {-90,90},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Interfaces.RealInput x0l annotation(Placement(visible = true,transformation(origin = {-100,-80},extent = {{-20,-20},{20,20}},rotation = 0),iconTransformation(origin = {-90,-92},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Interfaces.RealInput fa annotation(Placement(visible = true,transformation(origin = {2,-112},extent = {{-20,-20},{20,20}},rotation = 90),iconTransformation(origin = {2,-90},extent = {{-10,-10},{10,10}},rotation = 90)));
            .Modelica.Blocks.Interfaces.RealInput noise annotation(Placement(visible = true,transformation(origin = {-100,2},extent = {{-20,-20},{20,20}},rotation = 0),iconTransformation(origin = {-90,0},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            v0u = der(x0u);
            v0l = der(x0l);
            v = der(x);
            a = der(v);
            omg = der(phi);
            aw = der(omg);
            m * a = (-cu * (v - v0u + lu * omg)) - ku * (x - x0u + lu * phi) - cl * (v - v0l - ld * omg) - kl * (x - x0l - ld * phi) + fa;
            J * aw = (-lu * (cu * (v - v0u + lu * omg) + ku * (x - x0u + lu * phi))) + ld * (cl * (v - v0l - ld * omg) + kl * (x - x0l - ld * phi)) + la * fa;
            ag = a + la * aw + noise;
            force = m * a;
            annotation(experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.01),Icon(graphics = {Text(origin={-88,73},extent={{-14,7},{14,-7}},textString="x0u"),Rectangle(extent={{-100,100},{100,-100}}),Text(origin={1008,-146},extent={{-952,226},{-1074,250}},textString="ElevatorLateralPlant"),Text(origin={88,23},extent={{-18,7},{18,-7}},textString="ag"),Text(origin={-86,-75},extent={{-14,7},{14,-7}},textString="x0l"),Text(origin={0,-71},extent={{-14,7},{14,-7}},textString="fa"),Bitmap(origin={-4,8},extent={{-68,-76},{68,76}},imageSource=""),Text(origin={-94,21},extent={{-14,7},{14,-7}},textString="noise")}));
        end ElevatorLateralPlant;
        model ElevatorLateralPlantS "Mechanical part of elevator model plant"
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.TranslationalSpringConstant k = 2 * 4e5 "Spring constant of upper roller";
            parameter .Modelica.Units.SI.TranslationalDampingConstant c = 2 * 3e3 "Damping constant of upper roller";
            .Modelica.Units.SI.Length x(start = 0) "Holizontal vibration of cabin";
            .Modelica.Units.SI.Velocity v "Velocity of vibration of cabin";
            .Modelica.Units.SI.Acceleration a "Acceleration of vibration of cabin";
            .Modelica.Units.SI.Velocity v0(start = 0) "Velocity of roller";
            .Modelica.Units.SI.Force force "Inertia force of cabin";
            .Modelica.Units.SI.Force fdo "Disturbance force of observer";
            .Modelica.Blocks.Interfaces.RealOutput ag annotation(Placement(visible = true,transformation(origin = {98,60},extent = {{-10,-10},{10,10}},rotation = 0),iconTransformation(origin = {90,58},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Interfaces.RealInput x0 annotation(Placement(visible = true,transformation(origin = {-100,58},extent = {{-20,-20},{20,20}},rotation = 0),iconTransformation(origin = {-90,58},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Interfaces.RealInput fa annotation(Placement(visible = true,transformation(origin = {2,-112},extent = {{-20,-20},{20,20}},rotation = 90),iconTransformation(origin = {2,-90},extent = {{-10,-10},{10,10}},rotation = 90)));
            .Modelica.Blocks.Interfaces.RealOutput fd annotation(Placement(visible = true,transformation(origin = {100,-60},extent = {{-10,-10},{10,10}},rotation = 0),iconTransformation(origin = {90,-60},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Interfaces.RealInput noise annotation(Placement(visible = true,transformation(origin = {-100,-60},extent = {{-20,-20},{20,20}},rotation = 0),iconTransformation(origin = {-90,-60},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            v0 = der(x0);
            v = der(x);
            a = der(v);
            m * a = (-c * (v - v0)) - k * (x - x0) + fa;
            ag = a + noise;
            force = m * a;
            fd = force - fa;
            fdo = c * v0 + k * x0;
            annotation(experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.01),Icon(graphics = {Text(origin={-88,73},extent={{-14,7},{14,-7}},textString="x0"),Rectangle(extent={{-100,100},{100,-100}}),Text(origin={1008,-146},extent={{-952,226},{-1074,250}},textString="ElevatorLateralPlantS"),Text(origin={88,75},extent={{-18,7},{18,-7}},textString="ag"),Text(origin={-86,-73},extent={{-14,7},{14,-7}},textString="noise"),Text(origin={0,-71},extent={{-14,7},{14,-7}},textString="fa"),Bitmap(origin={-4,8},extent={{-68,-76},{68,76}},imageSource="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"),Text(origin={88,-39},extent={{-18,7},{18,-7}},textString="fd")},coordinateSystem(initialScale = 1)));
        end ElevatorLateralPlantS;
        block IntegratorM "Output the integral of the input signal with optional reset"
            parameter Integer n = 1 "Number of inputs (= number of outputs)";
            parameter Real k(unit = "1") = 1 "Integrator gain";
            parameter Boolean use_reset = false "= true, if reset port enabled" annotation(Evaluate = true,HideResult = true,choices(checkBox = true));
            parameter Boolean use_set = false "= true, if set port enabled and used as reinitialization value when reset" annotation(Dialog(enable = use_reset),Evaluate = true,HideResult = true,choices(checkBox = true));
            parameter .Modelica.Blocks.Types.Init initType = .Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)" annotation(Evaluate = true,Dialog(group = "Initialization"));
            parameter Real y_start[n] = zeros(n) "Initial or guess value of output (= state)" annotation(Dialog(group = "Initialization"));
            extends .Modelica.Blocks.Interfaces.MIMO(final nin = n,final nout = n,y(start = y_start));
            .Modelica.Blocks.Interfaces.BooleanInput reset if use_reset "Optional connector of reset signal" annotation(Placement(transformation(extent = {{-20,-20},{20,20}},rotation = 90,origin = {60,-120})));
            .Modelica.Blocks.Interfaces.RealInput set if use_reset and use_set "Optional connector of set signal" annotation(Placement(transformation(extent = {{-20,-20},{20,20}},rotation = 270,origin = {60,120})));
        protected
            .Modelica.Blocks.Interfaces.BooleanOutput local_reset annotation(HideResult = true);
            .Modelica.Blocks.Interfaces.RealOutput local_set[n] annotation(HideResult = true);
        initial equation
            if initType == .Modelica.Blocks.Types.Init.SteadyState then
                der(y) = zeros(n);
            elseif initType == .Modelica.Blocks.Types.Init.InitialState or initType == .Modelica.Blocks.Types.Init.InitialOutput then
                y = y_start;
            end if;
        equation
            if use_reset then
                connect(reset,local_reset);
                if use_set then
                    connect(set,local_set);
                else
                    local_set = y_start;
                end if;
                when local_reset then
                    reinit(y,local_set);
                end when;
            else
                local_reset = false;
                local_set = zeros(n);
            end if;
            der(y) = k * u;
            annotation(Documentation(info = "<html>
      <p>
      This blocks computes output <strong>y</strong> as
      <em>integral</em> of the input <strong>u</strong> multiplied with
      the gain <em>k</em>:
      </p>
      <blockquote><pre>
        k
      y = - u
        s
      </pre></blockquote>
      
      <p>
      It might be difficult to initialize the integrator in steady state.
      This is discussed in the description of package
      <a href=\"modelica://Modelica.Blocks.Continuous#info\">Continuous</a>.
      </p>
      
      <p>
      If the <em>reset</em> port is enabled, then the output <strong>y</strong> is reset to <em>set</em>
      or to <em>y_start</em> (if the <em>set</em> port is not enabled), whenever the <em>reset</em>
      port has a rising edge.
      </p>
      </html>"),Icon(coordinateSystem(preserveAspectRatio = true,extent = {{-100,-100},{100,100}}),graphics = {Line(points={{-80,78},{-80,-90}},color={192,192,192}),Polygon(lineColor={192,192,192},fillColor={192,192,192},fillPattern=FillPattern.Solid,points={{-80,90},{-88,68},{-72,68},{-80,90}}),Line(points={{-90,-80},{82,-80}},color={192,192,192}),Polygon(lineColor={192,192,192},fillColor={192,192,192},fillPattern=FillPattern.Solid,points={{90,-80},{68,-72},{68,-88},{90,-80}}),Text(lineColor={192,192,192},extent={{0,-70},{60,-10}},textString="I"),Text(origin={2,8},extent={{-150,-150},{150,-110}},textString="k=%k"),Line(points={{-80,-80},{80,80}},color={0,0,127}),Line(visible=false,points={{60,-100},{60,-80}},color={255,0,255},pattern=LinePattern.Dot),Text(visible=false,extent={{-28,-62},{94,-86}},textString="reset"),Text(origin={0,-28},extent={{-150,-150},{150,-110}},textString="n=%n")}));
        end IntegratorM;
        block AddM "Output the sum of the two inputs"
            extends .Modelica.Blocks.Interfaces.MI2MO;
            parameter Integer n = 1 "Number of inputs (= number of outputs)";
            parameter Real k1 = +1 "Gain of input signal 1";
            parameter Real k2 = +1 "Gain of input signal 2";
        equation
            y = k1 * u1 + k2 * u2;
            annotation(Documentation(info = "<html>
      <p>
      This blocks computes output <strong>y</strong> as <em>sum</em> of the
      two input signals <strong>u1</strong> and <strong>u2</strong>:
      </p>
      <blockquote><pre>
      <strong>y</strong> = k1*<strong>u1</strong> + k2*<strong>u2</strong>;
      </pre></blockquote>
      <p>
      Example:
      </p>
      <blockquote><pre>
       parameter:   k1= +2, k2= -3
      
      results in the following equations:
      
       y = 2 * u1 - 3 * u2
      </pre></blockquote>
      
      </html>"),Icon(coordinateSystem(preserveAspectRatio = true,extent = {{-100,-100},{100,100}}),graphics = {Line(points={{-100,60},{-74,24},{-44,24}},color={0,0,127}),Line(points={{-100,-60},{-74,-24},{-44,-24}},color={0,0,127}),Ellipse(lineColor={0,0,127},extent={{-50,-50},{50,50}}),Line(points={{50,0},{100,0}},color={0,0,127}),Text(extent={{-40,40},{40,-40}},textString="+"),Text(extent={{-100,52},{5,92}},textString="%k1"),Text(extent={{-100,-92},{5,-52}},textString="%k2")}),Diagram(coordinateSystem(preserveAspectRatio = true,extent = {{-100,-100},{100,100}}),graphics = {Line(points={{50,0},{100,0}},color={0,0,255}),Line(points={{50,0},{100,0}},color={0,0,127})}));
        end AddM;
        block Add3M "Output the sum of the three inputs"
            extends .Modelica.Blocks.Icons.Block;
            parameter Integer n = 1 "Number of inputs (= number of outputs)";
            parameter Real k1 = +1 "Gain of input signal 1";
            parameter Real k2 = +1 "Gain of input signal 2";
            parameter Real k3 = +1 "Gain of input signal 3";
            .Modelica.Blocks.Interfaces.RealInput u1[n] "Connector of Real input signal 1" annotation(Placement(transformation(extent = {{-140,60},{-100,100}})));
            .Modelica.Blocks.Interfaces.RealInput u2[n] "Connector of Real input signal 2" annotation(Placement(transformation(extent = {{-140,-20},{-100,20}})));
            .Modelica.Blocks.Interfaces.RealInput u3[n] "Connector of Real input signal 3" annotation(Placement(transformation(extent = {{-140,-100},{-100,-60}})));
            .Modelica.Blocks.Interfaces.RealOutput y[n] "Connector of Real output signal" annotation(Placement(transformation(extent = {{100,-10},{120,10}})));
        equation
            y = k1 * u1 + k2 * u2 + k3 * u3;
            annotation(Documentation(info = "<html>
      <p>
      This blocks computes output <strong>y</strong> as <em>sum</em> of the
      three input signals <strong>u1</strong>, <strong>u2</strong> and <strong>u3</strong>:
      </p>
      <blockquote><pre>
      <strong>y</strong> = k1*<strong>u1</strong> + k2*<strong>u2</strong> + k3*<strong>u3</strong>;
      </pre></blockquote>
      <p>
      Example:
      </p>
      <blockquote><pre>
       parameter:   k1= +2, k2= -3, k3=1;
      
      results in the following equations:
      
       y = 2 * u1 - 3 * u2 + u3;
      </pre></blockquote>
      
      </html>"),Icon(coordinateSystem(preserveAspectRatio = true,extent = {{-100,-100},{100,100}}),graphics = {Text(extent={{-100,50},{5,90}},textString="%k1"),Text(extent={{-100,-20},{5,20}},textString="%k2"),Text(extent={{-100,-50},{5,-90}},textString="%k3"),Text(extent={{10,40},{90,-40}},textString="+")}));
        end Add3M;
    end Components;
    package Examples
        model TestElevatorModel1
            extends .Modelica.Icons.Example;
            ElevatorLib.Components.ElevatorModel1 elevatorModel1 annotation(Placement(visible = true,transformation(origin = {-14,1.42109e-14},extent = {{-54,-54},{54,54}},rotation = 0)));
            .Modelica.Blocks.Sources.Trapezoid trapezoid(amplitude = 1,falling = 10,period = 100,rising = 10,width = 70) annotation(Placement(visible = true,transformation(origin = {-94,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Mechanics.Rotational.Components.Inertia Jm(J = 0.01) annotation(Placement(visible = true,transformation(origin = {76,0},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            connect(trapezoid.y,elevatorModel1.vl) annotation(Line(points = {{-82,0},{-62,0}},color = {0,0,127}));
            connect(elevatorModel1.flange_b,Jm.flange_a) annotation(Line(points = {{40,0},{66,0}}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.02));
        end TestElevatorModel1;
        model TestElevatorModel2
            extends .Modelica.Icons.Example;
            .Modelica.Blocks.Sources.Trapezoid trapezoid(amplitude = 1,falling = 10,period = 100,rising = 10,width = 70) annotation(Placement(visible = true,transformation(origin = {-66,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            ElevatorLib.Components.ElevatorModel2 elevatorModel2 annotation(Placement(visible = true,transformation(origin = {-2,4.44089e-16},extent = {{-40,-40},{40,40}},rotation = 0)));
        equation
            connect(trapezoid.y,elevatorModel2.vl) annotation(Line(points = {{-55,0},{-42,0}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.02));
        end TestElevatorModel2;
        model TestElevatorModel1CosInput
            extends .Modelica.Icons.Example;
            ElevatorLib.Components.ElevatorModel1 elevatorModel1 annotation(Placement(visible = true,transformation(origin = {-14,1.42109e-14},extent = {{-54,-54},{54,54}},rotation = 0)));
            .Modelica.Mechanics.Rotational.Components.Inertia Jm(J = 0.01) annotation(Placement(visible = true,transformation(origin = {76,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Cosine cosine(amplitude = -1,f = 1 / 80) annotation(Placement(visible = true,transformation(origin = {-154,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Cosine cosine1(amplitude = 1,f = 1 / 80,offset = 0,startTime = 80) annotation(Placement(visible = true,transformation(origin = {-154,-44},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Sum sum1(nin = 4) annotation(Placement(visible = true,transformation(origin = {-100,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Step step annotation(Placement(visible = true,transformation(origin = {-156,44},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Step step1(height = -1,startTime = 80) annotation(Placement(visible = true,transformation(origin = {-156,-90},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            connect(elevatorModel1.flange_b,Jm.flange_a) annotation(Line(points = {{40,0},{66,0}}));
            connect(step.y,sum1.u[1]) annotation(Line(points = {{-144,44},{-130,44},{-130,0},{-112,0}},color = {0,0,127}));
            connect(cosine.y,sum1.u[2]) annotation(Line(points = {{-142,0},{-112,0}},color = {0,0,127}));
            connect(cosine1.y,sum1.u[3]) annotation(Line(points = {{-142,-44},{-130,-44},{-130,0},{-112,0}},color = {0,0,127}));
            connect(step1.y,sum1.u[4]) annotation(Line(points = {{-144,-90},{-130,-90},{-130,0},{-112,0}},color = {0,0,127}));
            connect(sum1.y,elevatorModel1.vl) annotation(Line(points = {{-88,0},{-62,0}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.02));
        end TestElevatorModel1CosInput;
        model TestElevatorModel2_EM_withFB
            extends .Modelica.Icons.Example;
            .Modelica.Blocks.Sources.Trapezoid trapezoid(amplitude = 1,falling = 10,period = 100,rising = 10,width = 70) annotation(Placement(visible = true,transformation(origin = {-158,54},extent = {{-10,-10},{10,10}},rotation = 0)));
            ElevatorLib.Components.ElevatorModel2 elevatorModel2 annotation(Placement(visible = true,transformation(origin = {-94,54},extent = {{-40,-40},{40,40}},rotation = 0)));
            .Modelica.Electrical.Analog.Sources.SignalVoltage voltage(i(start = -58.8399)) annotation(Placement(visible = true,transformation(origin = {18,0},extent = {{10,-10},{-10,10}},rotation = 90)));
            .Modelica.Electrical.Analog.Basic.Resistor resistor(R = 2) annotation(Placement(visible = true,transformation(origin = {34,32},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Electrical.Analog.Basic.RotationalEMF emf(k = 50) annotation(Placement(visible = true,transformation(origin = {50,0},extent = {{-10,10},{10,-10}},rotation = 0)));
            .Modelica.Electrical.Analog.Basic.Ground ground annotation(Placement(visible = true,transformation(origin = {18,-42},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Mechanics.Rotational.Components.Inertia inertia(J = 0.01) annotation(Placement(visible = true,transformation(origin = {80,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            ElevatorLib.Components.ElevatorModel1Plant elevatorModel1Plant(m = 2500) annotation(Placement(visible = true,transformation(origin = {139,-1},extent = {{-37,-37},{37,37}},rotation = 0)));
            .Modelica.Blocks.Continuous.LimPID pid(Td = 1e-4,controllerType = .Modelica.Blocks.Types.SimpleController.P,k = 100000,withFeedForward = true,yMax = 300,y_start = -117.68) annotation(Placement(visible = true,transformation(origin = {-20,0},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            connect(trapezoid.y,elevatorModel2.vl) annotation(Line(points = {{-147,54},{-134,54}},color = {0,0,127}));
            connect(voltage.p,resistor.n) annotation(Line(points = {{18,10},{18,32},{24,32}},color = {0,0,255}));
            connect(resistor.p,emf.n) annotation(Line(points = {{44,32},{50,32},{50,10}},color = {0,0,255}));
            connect(emf.p,voltage.n) annotation(Line(points = {{50,-10},{50,-20},{18,-20},{18,-10}},color = {0,0,255}));
            connect(ground.p,voltage.n) annotation(Line(points = {{18,-32},{18,-10}},color = {0,0,255}));
            connect(emf.flange,inertia.flange_a) annotation(Line(points = {{60,0},{70,0}}));
            connect(inertia.flange_b,elevatorModel1Plant.flange_a) annotation(Line(points = {{90,0},{102,0}}));
            connect(pid.y,voltage.v) annotation(Line(points = {{-9,0},{6,0}},color = {0,0,127}));
            connect(elevatorModel2.lout,pid.u_s) annotation(Line(points = {{-52,26},{-40,26},{-40,0},{-32,0}},color = {0,0,127}));
            connect(elevatorModel1Plant.lout,pid.u_m) annotation(Line(points = {{175,-1},{192,-1},{192,-64},{-20,-64},{-20,-12}},color = {0,0,127}));
            connect(elevatorModel2.vbout,pid.u_ff) annotation(Line(points = {{-52,54},{-36,54},{-36,-22},{-14,-22},{-14,-12}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.02));
        end TestElevatorModel2_EM_withFB;
        model TestElevatorModel2_EM_FF
            extends .Modelica.Icons.Example;
            .Modelica.Blocks.Sources.Trapezoid trapezoid(amplitude = 1,falling = 10,period = 100,rising = 10,width = 70) annotation(Placement(visible = true,transformation(origin = {-158,54},extent = {{-10,-10},{10,10}},rotation = 0)));
            ElevatorLib.Components.ElevatorModel2 elevatorModel2 annotation(Placement(visible = true,transformation(origin = {-94,54},extent = {{-40,-40},{40,40}},rotation = 0)));
            .Modelica.Electrical.Analog.Sources.SignalVoltage voltage(i(start = -58.8399)) annotation(Placement(visible = true,transformation(origin = {18,0},extent = {{10,-10},{-10,10}},rotation = 90)));
            .Modelica.Electrical.Analog.Basic.Resistor resistor(R = 2) annotation(Placement(visible = true,transformation(origin = {34,32},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Electrical.Analog.Basic.RotationalEMF emf(k = 50) annotation(Placement(visible = true,transformation(origin = {50,0},extent = {{-10,10},{10,-10}},rotation = 0)));
            .Modelica.Electrical.Analog.Basic.Ground ground annotation(Placement(visible = true,transformation(origin = {18,-42},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Mechanics.Rotational.Components.Inertia inertia(J = 0.01) annotation(Placement(visible = true,transformation(origin = {80,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            ElevatorLib.Components.ElevatorModel1Plant elevatorModel1Plant annotation(Placement(visible = true,transformation(origin = {139,-1},extent = {{-37,-37},{37,37}},rotation = 0)));
        equation
            connect(trapezoid.y,elevatorModel2.vl) annotation(Line(points = {{-147,54},{-134,54}},color = {0,0,127}));
            connect(voltage.p,resistor.n) annotation(Line(points = {{18,10},{18,32},{24,32}},color = {0,0,255}));
            connect(resistor.p,emf.n) annotation(Line(points = {{44,32},{50,32},{50,10}},color = {0,0,255}));
            connect(emf.p,voltage.n) annotation(Line(points = {{50,-10},{50,-20},{18,-20},{18,-10}},color = {0,0,255}));
            connect(ground.p,voltage.n) annotation(Line(points = {{18,-32},{18,-10}},color = {0,0,255}));
            connect(emf.flange,inertia.flange_a) annotation(Line(points = {{60,0},{70,0}}));
            connect(inertia.flange_b,elevatorModel1Plant.flange_a) annotation(Line(points = {{90,0},{102,0}}));
            connect(elevatorModel2.vbout,voltage.v) annotation(Line(points = {{-52,54},{-20,54},{-20,0},{6,0}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 100,Tolerance = 1e-06,Interval = 0.02));
        end TestElevatorModel2_EM_FF;
        model TestLateralPlant
            extends .Modelica.Icons.Example;
            ElevatorLib.Components.ElevatorLateralPlant elevatorLateralPlant annotation(Placement(visible = true,transformation(origin = {5.32907e-15,8.88178e-16},extent = {{-40,-40},{40,40}},rotation = 0)));
            .Modelica.Blocks.Sources.Sine sine_u(amplitude = 0.05,f = 1) annotation(Placement(visible = true,transformation(origin = {-90,36},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Sine sine_l(amplitude = 0.05,f = 1,phase = 1.570796326794897) annotation(Placement(visible = true,transformation(origin = {-90,-38},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Constant const(k = 0) annotation(Placement(visible = true,transformation(origin = {-38,-74},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Constant noise(k = 0) annotation(Placement(visible = true,transformation(origin = {-120,0},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            connect(sine_u.y,elevatorLateralPlant.x0u) annotation(Line(points = {{-79,36},{-36,36}},color = {0,0,127}));
            connect(sine_l.y,elevatorLateralPlant.x0l) annotation(Line(points = {{-78,-38},{-36,-38},{-36,-36}},color = {0,0,127}));
            connect(const.y,elevatorLateralPlant.fa) annotation(Line(points = {{-26,-74},{0,-74},{0,-36}},color = {0,0,127}));
            connect(noise.y,elevatorLateralPlant.noise) annotation(Line(points = {{-108,0},{-36,0}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 5,Tolerance = 1e-06,Interval = 0.01));
        end TestLateralPlant;
        model TestLateralPlant_PFB
            extends .Modelica.Icons.Example;
            ElevatorLib.Components.ElevatorLateralPlant elevatorLateralPlant(phi(displayUnit = "rad")) annotation(Placement(visible = true,transformation(origin = {5.32907e-15,8.88178e-16},extent = {{-40,-40},{40,40}},rotation = 0)));
            .Modelica.Blocks.Sources.Sine sine_u(amplitude = 0.05,f = 1) annotation(Placement(visible = true,transformation(origin = {-90,36},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Sine sine_l(amplitude = 0.05,f = 1,phase = 1.570796326794897) annotation(Placement(visible = true,transformation(origin = {-90,-38},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain Kp(k = -25e3) annotation(Placement(visible = true,transformation(origin = {68,-50},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_v annotation(Placement(visible = true,transformation(origin = {72,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_x annotation(Placement(visible = true,transformation(origin = {114,0},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain Ki(k = -2e6) annotation(Placement(visible = true,transformation(origin = {70,-94},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add annotation(Placement(visible = true,transformation(origin = {30,-70},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Constant noise(k = 0) annotation(Placement(visible = true,transformation(origin = {-120,0},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            connect(sine_u.y,elevatorLateralPlant.x0u) annotation(Line(points = {{-79,36},{-36,36}},color = {0,0,127}));
            connect(sine_l.y,elevatorLateralPlant.x0l) annotation(Line(points = {{-78,-38},{-36,-38},{-36,-36}},color = {0,0,127}));
            connect(elevatorLateralPlant.ag,integrator_v.u) annotation(Line(points = {{36,0},{60,0}},color = {0,0,127}));
            connect(integrator_v.y,integrator_x.u) annotation(Line(points = {{84,0},{102,0}},color = {0,0,127}));
            connect(Kp.u,integrator_v.y) annotation(Line(points = {{80,-50},{90,-50},{90,0},{84,0}},color = {0,0,127}));
            connect(Ki.u,integrator_x.y) annotation(Line(points = {{82,-94},{138,-94},{138,0},{126,0}},color = {0,0,127}));
            connect(Kp.y,add.u1) annotation(Line(points = {{58,-50},{50,-50},{50,-64},{42,-64}},color = {0,0,127}));
            connect(Ki.y,add.u2) annotation(Line(points = {{59,-94},{50,-94},{50,-76},{42,-76}},color = {0,0,127}));
            connect(add.y,elevatorLateralPlant.fa) annotation(Line(points = {{20,-70},{0,-70},{0,-36}},color = {0,0,127}));
            connect(noise.y,elevatorLateralPlant.noise) annotation(Line(points = {{-108,0},{-36,0}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 5,Tolerance = 1e-06,Interval = 0.01));
        end TestLateralPlant_PFB;
        model TestDOB
            extends .Modelica.Icons.Example;
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.Frequency al = 1e6;
            .Modelica.Blocks.Sources.Sine sine_x0(amplitude = 0.05,f = 1) annotation(Placement(visible = true,transformation(origin = {-84,62},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_v annotation(Placement(visible = true,transformation(origin = {78,64},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain gain(k = m * al) annotation(Placement(visible = true,transformation(origin = {106,-10},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add annotation(Placement(visible = true,transformation(origin = {60,-30},extent = {{10,-10},{-10,10}},rotation = 90)));
            .Modelica.Blocks.Continuous.TransferFunction transferFunction(a = {1,al},b = {al}) annotation(Placement(visible = true,transformation(origin = {60,-62},extent = {{-10,-10},{10,10}},rotation = 270)));
            .Modelica.Blocks.Math.Add dhat(k2 = -1) annotation(Placement(visible = true,transformation(origin = {42,-88},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add2 annotation(Placement(visible = true,transformation(origin = {0,-52},extent = {{10,-10},{-10,10}},rotation = -90)));
            .Modelica.Blocks.Sources.Constant f_bar(k = 0) annotation(Placement(visible = true,transformation(origin = {-82,-90},extent = {{-10,-10},{10,10}},rotation = 0)));
            Components.ElevatorLateralPlantS elevatorLateralPlantS(m = 2800) annotation(Placement(visible = true,transformation(origin = {0,40},extent = {{-40,-40},{40,40}},rotation = 0)));
            .Modelica.Blocks.Noise.NormalNoise normalNoise(samplePeriod = 0.01,sigma = 1,useAutomaticLocalSeed = true,useGlobalSeed = true) annotation(Placement(visible = true,transformation(origin = {-124,16},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain gainN(k = 0.01) annotation(Placement(visible = true,transformation(origin = {-76,16},extent = {{-10,-10},{10,10}},rotation = 0)));
        equation
            connect(integrator_v.y,gain.u) annotation(Line(points = {{89,64},{128,64},{128,-10},{118,-10}},color = {0,0,127}));
            connect(gain.y,add.u2) annotation(Line(points = {{95,-10},{66,-10},{66,-18}},color = {0,0,127}));
            connect(add.y,transferFunction.u) annotation(Line(points = {{60,-41},{60,-53}},color = {0,0,127}));
            connect(transferFunction.y,dhat.u1) annotation(Line(points = {{60,-73},{60,-82},{54,-82}},color = {0,0,127}));
            connect(dhat.u2,gain.y) annotation(Line(points = {{54,-94},{80,-94},{80,-10},{95,-10}},color = {0,0,127}));
            connect(dhat.y,add2.u1) annotation(Line(points = {{32,-88},{6,-88},{6,-64}},color = {0,0,127}));
            connect(f_bar.y,add2.u2) annotation(Line(points = {{-71,-90},{-6,-90},{-6,-64}},color = {0,0,127}));
            connect(add.u1,add2.y) annotation(Line(points = {{54,-18},{54,-10},{0,-10},{0,-41}},color = {0,0,127}));
            connect(sine_x0.y,elevatorLateralPlantS.x0) annotation(Line(points = {{-72,62},{-36,62},{-36,63}},color = {0,0,127}));
            connect(elevatorLateralPlantS.ag,integrator_v.u) annotation(Line(points = {{36,64},{66,64}},color = {0,0,127}));
            connect(elevatorLateralPlantS.fa,add2.y) annotation(Line(points = {{0,4},{0,-40}},color = {0,0,127}));
            connect(normalNoise.y,gainN.u) annotation(Line(points = {{-113,16},{-88,16}},color = {0,0,127}));
            connect(gainN.y,elevatorLateralPlantS.noise) annotation(Line(points = {{-65,16},{-36,16}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 20,Tolerance = 1e-06,Interval = 0.01));
        end TestDOB;
        model TestDOB_PFB
            extends .Modelica.Icons.Example;
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.Frequency al = 1e6;
            .Modelica.Blocks.Sources.Sine sine_x0(amplitude = 0.05,f = 1) annotation(Placement(visible = true,transformation(origin = {-84,62},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_v annotation(Placement(visible = true,transformation(origin = {78,64},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain gain(k = m * al) annotation(Placement(visible = true,transformation(origin = {106,-10},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add annotation(Placement(visible = true,transformation(origin = {60,-30},extent = {{10,-10},{-10,10}},rotation = 90)));
            .Modelica.Blocks.Continuous.TransferFunction transferFunction(a = {1,al},b = {al}) annotation(Placement(visible = true,transformation(origin = {60,-62},extent = {{-10,-10},{10,10}},rotation = 270)));
            .Modelica.Blocks.Math.Add dhat(k2 = -1) annotation(Placement(visible = true,transformation(origin = {42,-88},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add2 annotation(Placement(visible = true,transformation(origin = {0,-52},extent = {{10,-10},{-10,10}},rotation = -90)));
            Components.ElevatorLateralPlantS elevatorLateralPlantS(m = 2800,a(start = 0,fixed = true)) annotation(Placement(visible = true,transformation(origin = {0,40},extent = {{-40,-40},{40,40}},rotation = 0)));
            .Modelica.Blocks.Noise.NormalNoise normalNoise(samplePeriod = 0.01,sigma = 1,useAutomaticLocalSeed = true,useGlobalSeed = true) annotation(Placement(visible = true,transformation(origin = {-124,16},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain gainN(k = 0.01) annotation(Placement(visible = true,transformation(origin = {-74,16},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain Ki(k = -2e6) annotation(Placement(visible = true,transformation(origin = {108,-160},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain Kp(k = -25e4) annotation(Placement(visible = true,transformation(origin = {106,-122},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_x annotation(Placement(visible = true,transformation(origin = {158,64},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add1 annotation(Placement(visible = true,transformation(origin = {68,-142},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain K_f_bar(k = 1) annotation(Placement(visible = true,transformation(origin = {26,-140},extent = {{10,-10},{-10,10}},rotation = 0)));
        equation
            connect(integrator_v.y,gain.u) annotation(Line(points = {{89,64},{128,64},{128,-10},{118,-10}},color = {0,0,127}));
            connect(gain.y,add.u2) annotation(Line(points = {{95,-10},{66,-10},{66,-18}},color = {0,0,127}));
            connect(add.y,transferFunction.u) annotation(Line(points = {{60,-41},{60,-53}},color = {0,0,127}));
            connect(transferFunction.y,dhat.u1) annotation(Line(points = {{60,-73},{60,-82},{54,-82}},color = {0,0,127}));
            connect(dhat.u2,gain.y) annotation(Line(points = {{54,-94},{80,-94},{80,-10},{95,-10}},color = {0,0,127}));
            connect(dhat.y,add2.u1) annotation(Line(points = {{32,-88},{6,-88},{6,-64}},color = {0,0,127}));
            connect(add.u1,add2.y) annotation(Line(points = {{54,-18},{54,-10},{0,-10},{0,-41}},color = {0,0,127}));
            connect(sine_x0.y,elevatorLateralPlantS.x0) annotation(Line(points = {{-72,62},{-36,62},{-36,63}},color = {0,0,127}));
            connect(elevatorLateralPlantS.ag,integrator_v.u) annotation(Line(points = {{36,64},{66,64}},color = {0,0,127}));
            connect(elevatorLateralPlantS.fa,add2.y) annotation(Line(points = {{0,4},{0,-40}},color = {0,0,127}));
            connect(normalNoise.y,gainN.u) annotation(Line(points = {{-113,16},{-87,16}},color = {0,0,127}));
            connect(gainN.y,elevatorLateralPlantS.noise) annotation(Line(points = {{-63,16},{-36,16}},color = {0,0,127}));
            connect(Kp.y,add1.u1) annotation(Line(points = {{95,-122},{87,-122},{87,-136},{79,-136}},color = {0,0,127}));
            connect(Ki.u,integrator_x.y) annotation(Line(points = {{120,-160},{192,-160},{192,64},{169,64}},color = {0,0,127}));
            connect(Ki.y,add1.u2) annotation(Line(points = {{97,-160},{88,-160},{88,-148},{80,-148}},color = {0,0,127}));
            connect(integrator_x.u,integrator_v.y) annotation(Line(points = {{146,64},{90,64}},color = {0,0,127}));
            connect(Kp.u,integrator_v.y) annotation(Line(points = {{118,-122},{128,-122},{128,64},{90,64}},color = {0,0,127}));
            connect(K_f_bar.u,add1.y) annotation(Line(points = {{38,-140},{58,-140},{58,-142}},color = {0,0,127}));
            connect(K_f_bar.y,add2.u2) annotation(Line(points = {{16,-140},{-6,-140},{-6,-64}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 20,Tolerance = 1e-06,Interval = 0.01));
        end TestDOB_PFB;
        model TestDOBSS
            extends .Modelica.Icons.Example;
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.TranslationalSpringConstant k = 2 * 4e5 "Spring constant of upper roller";
            parameter .Modelica.Units.SI.TranslationalDampingConstant c = 2 * 3e3 "Damping constant of upper roller";
            parameter Real A[:,:] = [-c / m,-k / m,1 / m;1,0,0;0,0,0] "A matrix of observer";
            parameter Real B[:,:] = [1 / m;0;0] "B matrix of observer";
            parameter Real C[:,:] = [1,0,0;0,1,0] "C matrix of observer";
            parameter Real H[:,:] = [399.2727,-363.6364;1,201;8.888e7,0] "Observer gain( po=[-200,-201,-202])";
            .Modelica.Blocks.Sources.Sine sine_x0(amplitude = 0.05,f = 1) annotation(Placement(visible = true,transformation(origin = {-94,114},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_v annotation(Placement(visible = true,transformation(origin = {152,114},extent = {{-10,-10},{10,10}},rotation = 0)));
            ElevatorLib.Components.ElevatorLateralPlantS elevatorLateralPlantS(m = 2800) annotation(Placement(visible = true,transformation(origin = {-10,92},extent = {{-40,-40},{40,40}},rotation = 0)));
            .Modelica.Blocks.Noise.NormalNoise normalNoise(samplePeriod = 0.01,sigma = 1,useAutomaticLocalSeed = true,useGlobalSeed = true) annotation(Placement(visible = true,transformation(origin = {-134,68},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain gainN(k = 0) annotation(Placement(visible = true,transformation(origin = {-84,68},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_x annotation(Placement(visible = true,transformation(origin = {190,114},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Routing.Multiplex mux_y(n = 2) annotation(Placement(visible = true,transformation(origin = {152,32},extent = {{10,-10},{-10,10}},rotation = 0)));
            ElevatorLib.Components.IntegratorM integratorM(n = 3) annotation(Placement(visible = true,transformation(origin = {92,-28},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.MatrixGain matrixGainC(K = C) annotation(Placement(visible = true,transformation(origin = {132,-28},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.MatrixGain matrixGainA(K = A) annotation(Placement(visible = true,transformation(origin = {92,-68},extent = {{10,-10},{-10,10}},rotation = 0)));
            ElevatorLib.Components.AddM addM(n = 2,k2 = -1) annotation(Placement(visible = true,transformation(origin = {0.0,0.0},extent = {{122.0,2.0},{102.0,22.0}},rotation = 0.0)));
            .Modelica.Blocks.Math.MatrixGain matrixGainH(K = H) annotation(Placement(visible = true,transformation(origin = {72,12},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.MatrixGain matrixGainB(K = B) annotation(Placement(visible = true,transformation(origin = {16,-28},extent = {{-10,-10},{10,10}},rotation = 0)));
            ElevatorLib.Components.Add3M add3M(n = 3) annotation(Placement(visible = true,transformation(origin = {58,-28},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Routing.DeMultiplex3 deMultiplex3 annotation(Placement(visible = true,transformation(origin = {140,-68},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Constant f_bar(k = 0) annotation(Placement(visible = true,transformation(origin = {-68,-22},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add2(k1 = -1) annotation(Placement(visible = true,transformation(origin = {-30,-28},extent = {{10,-10},{-10,10}},rotation = 180)));
            .Modelica.Blocks.Math.Gain K_dhat(k = 1) annotation(Placement(visible = true,transformation(origin = {16,-88},extent = {{10,-10},{-10,10}},rotation = 0)));
        equation
            connect(sine_x0.y,elevatorLateralPlantS.x0) annotation(Line(points = {{-83,114},{-47,114},{-47,115}},color = {0,0,127}));
            connect(elevatorLateralPlantS.ag,integrator_v.u) annotation(Line(points = {{26,115.2},{41,115.2},{41,114.2},{140,114.2}},color = {0,0,127}));
            connect(normalNoise.y,gainN.u) annotation(Line(points = {{-123,68},{-97,68}},color = {0,0,127}));
            connect(gainN.y,elevatorLateralPlantS.noise) annotation(Line(points = {{-73,68},{-46,68}},color = {0,0,127}));
            connect(integrator_x.u,integrator_v.y) annotation(Line(points = {{178,114},{163,114}},color = {0,0,127}));
            connect(mux_y.u[1],integrator_v.y) annotation(Line(points = {{162,32},{170,32},{170,114},{163,114}},color = {0,0,127}));
            connect(mux_y.u[2],integrator_x.y) annotation(Line(points = {{162,32},{220,32},{220,114},{201,114}},color = {0,0,127}));
            connect(mux_y.y,addM.u1) annotation(Line(points = {{141,32},{131,32},{131,18},{124,18}},color = {0,0,127}));
            connect(matrixGainC.y,addM.u2) annotation(Line(points = {{143,-28},{153,-28},{153,6},{124,6}},color = {0,0,127}));
            connect(addM.y,matrixGainH.u) annotation(Line(points = {{101,12},{83,12}},color = {0,0,127}));
            connect(add3M.y,integratorM.u) annotation(Line(points = {{69,-28},{79,-28}},color = {0,0,127}));
            connect(integratorM.y,matrixGainC.u) annotation(Line(points = {{103,-28},{119,-28}},color = {0,0,127},thickness = 0.5));
            connect(matrixGainA.u,integratorM.y) annotation(Line(points = {{104,-68},{110,-68},{110,-28},{104,-28}},color = {0,0,127},thickness = 0.5));
            connect(matrixGainH.y,add3M.u1) annotation(Line(points = {{61,12},{31,12},{31,-20},{46,-20}},color = {0,0,127}));
            connect(matrixGainB.y,add3M.u2) annotation(Line(points = {{27,-28},{46,-28}},color = {0,0,127}));
            connect(matrixGainA.y,add3M.u3) annotation(Line(points = {{81,-68},{33,-68},{33,-36},{46,-36}},color = {0,0,127}));
            connect(deMultiplex3.u,integratorM.y) annotation(Line(points = {{128,-68},{110,-68},{110,-28},{104,-28}},color = {0,0,127},thickness = 0.5));
            connect(f_bar.y,add2.u2) annotation(Line(points = {{-57,-22},{-42,-22}},color = {0,0,127}));
            connect(deMultiplex3.y3[1],K_dhat.u) annotation(Line(points = {{151,-75},{160,-75},{160,-88},{28,-88}},color = {0,0,127}));
            connect(K_dhat.y,add2.u1) annotation(Line(points = {{5,-88},{-50,-88},{-50,-34},{-42,-34}},color = {0,0,127}));
            connect(add2.y,matrixGainB.u[1]) annotation(Line(points = {{-19,-28},{4,-28}},color = {0,0,127}));
            connect(elevatorLateralPlantS.fa,add2.y) annotation(Line(points = {{-9.2,56},{-9.2,-28},{-18.2,-28}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 20,Tolerance = 1e-06,Interval = 0.01));
        end TestDOBSS;
        model TestLateralPlantDOB__LQR
            extends .Modelica.Icons.Example;
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.Frequency al = 1e6;
            parameter Real F[:,:] = [9.9507e5,4.8062e5] "LQR gain";
            ElevatorLib.Components.ElevatorLateralPlant elevatorLateralPlant(phi(displayUnit = "rad")) annotation(Placement(visible = true,transformation(origin = {-2,78},extent = {{-40,-40},{40,40}},rotation = 0)));
            .Modelica.Blocks.Sources.Sine sine_u(amplitude = 0.05,f = 1) annotation(Placement(visible = true,transformation(origin = {-92,114},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Sine sine_d(amplitude = 0.05,f = 1,phase = 1.570796326794897) annotation(Placement(visible = true,transformation(origin = {-92,40},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_v annotation(Placement(visible = true,transformation(origin = {98,78},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_x annotation(Placement(visible = true,transformation(origin = {158,78},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Sources.Constant noise(k = 0) annotation(Placement(visible = true,transformation(origin = {-122,78},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add2 annotation(Placement(visible = true,transformation(origin = {-2,-18},extent = {{10,-10},{-10,10}},rotation = -90)));
            .Modelica.Blocks.Math.Gain Ki(k = -F[1,2]) annotation(Placement(visible = true,transformation(origin = {106,-126},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain Kp(k = -F[1,1]) annotation(Placement(visible = true,transformation(origin = {104,-88},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add dhat(k2 = -1) annotation(Placement(visible = true,transformation(origin = {40,-54},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add annotation(Placement(visible = true,transformation(origin = {58,4},extent = {{10,-10},{-10,10}},rotation = 90)));
            .Modelica.Blocks.Continuous.TransferFunction transferFunction(a = {1,al},b = {al}) annotation(Placement(visible = true,transformation(origin = {58,-28},extent = {{-10,-10},{10,10}},rotation = 270)));
            .Modelica.Blocks.Math.Gain K_f_bar(k = 1) annotation(Placement(visible = true,transformation(origin = {24,-106},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain gain(k = m * al) annotation(Placement(visible = true,transformation(origin = {104,24},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add1 annotation(Placement(visible = true,transformation(origin = {66,-108},extent = {{10,-10},{-10,10}},rotation = 0)));
        equation
            connect(sine_u.y,elevatorLateralPlant.x0u) annotation(Line(points = {{-81,114},{-38,114}},color = {0,0,127}));
            connect(sine_d.y,elevatorLateralPlant.x0l) annotation(Line(points = {{-81,40},{-39,40},{-39,41}},color = {0,0,127}));
            connect(elevatorLateralPlant.ag,integrator_v.u) annotation(Line(points = {{34,78},{86,78}},color = {0,0,127}));
            connect(integrator_v.y,integrator_x.u) annotation(Line(points = {{109,78},{146,78}},color = {0,0,127}));
            connect(noise.y,elevatorLateralPlant.noise) annotation(Line(points = {{-111,78},{-39,78}},color = {0,0,127}));
            connect(dhat.y,add2.u1) annotation(Line(points = {{29,-54},{3,-54},{3,-30}},color = {0,0,127}));
            connect(K_f_bar.u,add1.y) annotation(Line(points = {{36,-106},{56,-106},{56,-108}},color = {0,0,127}));
            connect(Kp.y,add1.u1) annotation(Line(points = {{93,-88},{85,-88},{85,-102},{77,-102}},color = {0,0,127}));
            connect(add.y,transferFunction.u) annotation(Line(points = {{58,-7},{58,-19}},color = {0,0,127}));
            connect(gain.y,add.u2) annotation(Line(points = {{93,24},{64,24},{64,16}},color = {0,0,127}));
            connect(K_f_bar.y,add2.u2) annotation(Line(points = {{13,-106},{-9,-106},{-9,-30}},color = {0,0,127}));
            connect(add.u1,add2.y) annotation(Line(points = {{52,16},{52,24},{-2,24},{-2,-7}},color = {0,0,127}));
            connect(Ki.y,add1.u2) annotation(Line(points = {{95,-126},{86,-126},{86,-114},{78,-114}},color = {0,0,127}));
            connect(transferFunction.y,dhat.u1) annotation(Line(points = {{58,-39},{58,-48},{52,-48}},color = {0,0,127}));
            connect(dhat.u2,gain.y) annotation(Line(points = {{52,-60},{78,-60},{78,24},{93,24}},color = {0,0,127}));
            connect(gain.u,integrator_v.y) annotation(Line(points = {{116,24},{126,24},{126,78},{110,78}},color = {0,0,127}));
            connect(Kp.u,integrator_v.y) annotation(Line(points = {{116,-88},{126,-88},{126,78},{110,78}},color = {0,0,127}));
            connect(Ki.u,integrator_x.y) annotation(Line(points = {{118,-126},{184,-126},{184,78},{170,78}},color = {0,0,127}));
            connect(add2.y,elevatorLateralPlant.fa) annotation(Line(points = {{-2,-7},{-2,17},{-1,17},{-1,41}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 5,Tolerance = 1e-06,Interval = 0.01));
        end TestLateralPlantDOB__LQR;
        model TestDOBSS_LQR
            extends .Modelica.Icons.Example;
            parameter .Modelica.Units.SI.Mass m = 2200 "Cabin payload mass";
            parameter .Modelica.Units.SI.TranslationalSpringConstant k = 2 * 4e5 "Spring constant of upper roller";
            parameter .Modelica.Units.SI.TranslationalDampingConstant c = 2 * 3e3 "Damping constant of upper roller";
            parameter Real A[:,:] = [-c / m,-k / m,1 / m;1,0,0;0,0,0] "A matrix of observer";
            parameter Real B[:,:] = [1 / m;0;0] "B matrix of observer";
            parameter Real C[:,:] = [1,0,0;0,1,0] "C matrix of observer";
            parameter Real H[:,:] = [58.2727,-363.6364;1,32;2.046e6,0] "Observer gain( po=[-30,-31,-32])";
            parameter Real F[:,:] = [1.4095e6,8.2481e5] "LQR gain(R=5e-13)";
            .Modelica.Blocks.Sources.Sine sine_x0(amplitude = 0.05,f = 1) annotation(Placement(visible = true,transformation(origin = {-84,146},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_v annotation(Placement(visible = true,transformation(origin = {162,146},extent = {{-10,-10},{10,10}},rotation = 0)));
            ElevatorLib.Components.ElevatorLateralPlantS elevatorLateralPlantS(m = 2800) annotation(Placement(visible = true,transformation(origin = {0,124},extent = {{-40,-40},{40,40}},rotation = 0)));
            .Modelica.Blocks.Noise.NormalNoise normalNoise(samplePeriod = 0.01,sigma = 1,useAutomaticLocalSeed = true,useGlobalSeed = true) annotation(Placement(visible = true,transformation(origin = {-124,100},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain gainN(k = 0.01) annotation(Placement(visible = true,transformation(origin = {-74,100},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Continuous.Integrator integrator_x annotation(Placement(visible = true,transformation(origin = {200,146},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Routing.Multiplex mux_y(n = 2) annotation(Placement(visible = true,transformation(origin = {162,64},extent = {{10,-10},{-10,10}},rotation = 0)));
            ElevatorLib.Components.IntegratorM integratorM(n = 3) annotation(Placement(visible = true,transformation(origin = {102,4},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.MatrixGain matrixGainC(K = C) annotation(Placement(visible = true,transformation(origin = {142,4},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.MatrixGain matrixGainA(K = A) annotation(Placement(visible = true,transformation(origin = {102,-36},extent = {{10,-10},{-10,10}},rotation = 0)));
            ElevatorLib.Components.AddM addM(n = 2,k2 = -1) annotation(Placement(visible = true,transformation(origin = {122,44},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.MatrixGain matrixGainH(K = H) annotation(Placement(visible = true,transformation(origin = {82,44},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.MatrixGain matrixGainB(K = B) annotation(Placement(visible = true,transformation(origin = {26,4},extent = {{-10,-10},{10,10}},rotation = 0)));
            ElevatorLib.Components.Add3M add3M(n = 3) annotation(Placement(visible = true,transformation(origin = {68,4},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Routing.DeMultiplex3 deMultiplex3 annotation(Placement(visible = true,transformation(origin = {150,-36},extent = {{-10,-10},{10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add2(k1 = -1) annotation(Placement(visible = true,transformation(origin = {-20,4},extent = {{10,-10},{-10,10}},rotation = 180)));
            .Modelica.Blocks.Math.Gain K_dhat(k = 1) annotation(Placement(visible = true,transformation(origin = {26,-56},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain Ki(k = -F[1,2]) annotation(Placement(visible = true,transformation(origin = {124,-128},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain K_f_bar(k = 1) annotation(Placement(visible = true,transformation(origin = {26,-108},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Add add1 annotation(Placement(visible = true,transformation(origin = {82,-108},extent = {{10,-10},{-10,10}},rotation = 0)));
            .Modelica.Blocks.Math.Gain Kp(k = -F[1,1]) annotation(Placement(visible = true,transformation(origin = {122,-84},extent = {{10,-10},{-10,10}},rotation = 0)));
        equation
            connect(sine_x0.y,elevatorLateralPlantS.x0) annotation(Line(points = {{-73,146},{-37,146},{-37,147}},color = {0,0,127}));
            connect(elevatorLateralPlantS.ag,integrator_v.u) annotation(Line(points = {{36,147.2},{51,147.2},{51,146.2},{150,146.2}},color = {0,0,127}));
            connect(normalNoise.y,gainN.u) annotation(Line(points = {{-113,100},{-87,100}},color = {0,0,127}));
            connect(gainN.y,elevatorLateralPlantS.noise) annotation(Line(points = {{-63,100},{-36,100}},color = {0,0,127}));
            connect(integrator_x.u,integrator_v.y) annotation(Line(points = {{188,146},{173,146}},color = {0,0,127}));
            connect(mux_y.u[1],integrator_v.y) annotation(Line(points = {{172,64},{180,64},{180,146},{173,146}},color = {0,0,127}));
            connect(mux_y.u[2],integrator_x.y) annotation(Line(points = {{172,64},{230,64},{230,146},{211,146}},color = {0,0,127}));
            connect(mux_y.y,addM.u1) annotation(Line(points = {{151,64},{141,64},{141,50},{133,50}},color = {0,0,127}));
            connect(matrixGainC.y,addM.u2) annotation(Line(points = {{153,4},{163,4},{163,38},{133,38}},color = {0,0,127}));
            connect(addM.y,matrixGainH.u) annotation(Line(points = {{111,44},{93,44}},color = {0,0,127}));
            connect(add3M.y,integratorM.u) annotation(Line(points = {{79,4},{89,4}},color = {0,0,127}));
            connect(integratorM.y,matrixGainC.u) annotation(Line(points = {{113,4},{129,4}},color = {0,0,127},thickness = 0.5));
            connect(matrixGainA.u,integratorM.y) annotation(Line(points = {{114,-36},{120,-36},{120,4},{114,4}},color = {0,0,127},thickness = 0.5));
            connect(matrixGainH.y,add3M.u1) annotation(Line(points = {{71,44},{41,44},{41,12},{56,12}},color = {0,0,127}));
            connect(matrixGainB.y,add3M.u2) annotation(Line(points = {{37,4},{56,4}},color = {0,0,127}));
            connect(matrixGainA.y,add3M.u3) annotation(Line(points = {{91,-36},{43,-36},{43,-4},{56,-4}},color = {0,0,127}));
            connect(deMultiplex3.u,integratorM.y) annotation(Line(points = {{138,-36},{120,-36},{120,4},{114,4}},color = {0,0,127},thickness = 0.5));
            connect(deMultiplex3.y3[1],K_dhat.u) annotation(Line(points = {{161,-43},{170,-43},{170,-56},{38,-56}},color = {0,0,127}));
            connect(K_dhat.y,add2.u1) annotation(Line(points = {{15,-56},{-40,-56},{-40,-2},{-32,-2}},color = {0,0,127}));
            connect(add2.y,matrixGainB.u[1]) annotation(Line(points = {{-9,4},{14,4}},color = {0,0,127}));
            connect(elevatorLateralPlantS.fa,add2.y) annotation(Line(points = {{0.8,88},{0.8,4},{-8.2,4}},color = {0,0,127}));
            connect(Ki.y,add1.u2) annotation(Line(points = {{113,-128},{108,-128},{108,-114},{94,-114}},color = {0,0,127}));
            connect(Kp.y,add1.u1) annotation(Line(points = {{111,-84},{107,-84},{107,-102},{94,-102}},color = {0,0,127}));
            connect(K_f_bar.u,add1.y) annotation(Line(points = {{38,-108},{71,-108}},color = {0,0,127}));
            connect(deMultiplex3.y2[1],Ki.u) annotation(Line(points = {{161,-36},{181,-36},{181,-128},{135,-128}},color = {0,0,127}));
            connect(deMultiplex3.y1[1],Kp.u) annotation(Line(points = {{161,-29},{201,-29},{201,-85},{133,-85}},color = {0,0,127}));
            connect(K_f_bar.y,add2.u2) annotation(Line(points = {{15,-108},{-61,-108},{-61,10},{-33,10}},color = {0,0,127}));
            annotation(Icon(coordinateSystem(initialScale = 1)),experiment(StartTime = 0,StopTime = 20,Tolerance = 1e-06,Interval = 0.04));
        end TestDOBSS_LQR;
    end Examples;
    annotation(uses(Modelica(version = "4.0.0")));
end ElevatorLib;
